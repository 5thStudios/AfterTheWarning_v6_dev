@using Models;
@using ContentModels = Umbraco.Web.PublishedContentModels;
@using Helpers;
@using formulate.core.Models;
@using formulate.app.Types;
@inherits UmbracoViewPage<ContentModels.PrayerRequest>

@{ Layout = "TopLevel.cshtml"; }


@{
    //Obtain page data
    String prayerTitle = Model.PrayerTitle;
    string prayersOffered = Model.TotalPrayersOffered.ToString("N0");
    IHtmlString prayer = Html.Raw(umbraco.library.ReplaceLineBreaks(Model.Prayer));

    DateTime requestDate = Model.RequestDate;
    String daySuffix = "";
    switch (requestDate.Day)
    {
        case 1:
        case 21:
        case 31:
            daySuffix = "<sup>st</sup>";
            break;
        case 2:
        case 22:
            daySuffix = "<sup>nd</sup>";
            break;
        case 3:
        case 23:
            daySuffix = "<sup>rd</sup>";
            break;
        default:
            daySuffix = "<sup>th</sup>";
            break;
    }
    String strRequestDate = string.Format("{0:MMMM d}{1} {0:, yyyy}", requestDate, daySuffix);

    bool isPrayeringFor = false;
    bool IsAuthenticated = User.Identity.IsAuthenticated;
    bool hidePrayerBtn = false;
    if (IsAuthenticated)
    {
        if (User.Identity.Name == Model.PrayerRequestMember.Name)
        {
            hidePrayerBtn = true;
        }
        else
        {
            isPrayeringFor = Html.isUserPledgedForPrayer(User.Identity.Name, Model.Id);
        }
    }







    //Determine current percentage
    int currentPercentage = Model.CurrentPercentage;
    DateTime baseCalculationDate = Model.BaseCalculationDate;
    int daysSinceBaseDate = (DateTime.Now - baseCalculationDate).Days;
    if (daysSinceBaseDate > currentPercentage)
    {
        currentPercentage = 0;
    }
    else
    {
        currentPercentage = currentPercentage - daysSinceBaseDate;
    }


    //Determine proper candle based upon current percentage
    var CmPrayerList = new ContentModels.PrayerList(Umbraco.TypedContent((int)Common.siteNode.ThePrayerCorner));
    string CandleUrl = CmPrayerList.CandleOut.Url;
    if (currentPercentage == 0)
    {
        CandleUrl = CmPrayerList.CandleOut.Url;
    }
    else if (currentPercentage >= 1 && currentPercentage <= 10)
    {
        CandleUrl = CmPrayerList.Candle10.Url;
    }
    else if (currentPercentage >= 11 && currentPercentage <= 20)
    {
        CandleUrl = CmPrayerList.Candle20.Url;
    }
    else if (currentPercentage >= 21 && currentPercentage <= 30)
    {
        CandleUrl = CmPrayerList.Candle30.Url;
    }
    else if (currentPercentage >= 31 && currentPercentage <= 40)
    {
        CandleUrl = CmPrayerList.Candle40.Url;
    }
    else if (currentPercentage >= 41 && currentPercentage <= 50)
    {
        CandleUrl = CmPrayerList.Candle50.Url;
    }
    else if (currentPercentage >= 51 && currentPercentage <= 60)
    {
        CandleUrl = CmPrayerList.Candle60.Url;
    }
    else if (currentPercentage >= 61 && currentPercentage <= 70)
    {
        CandleUrl = CmPrayerList.Candle70.Url;
    }
    else if (currentPercentage >= 71 && currentPercentage <= 80)
    {
        CandleUrl = CmPrayerList.Candle80.Url;
    }
    else if (currentPercentage >= 81 && currentPercentage <= 90)
    {
        CandleUrl = CmPrayerList.Candle90.Url;
    }
    else if (currentPercentage >= 91 && currentPercentage <= 100)
    {
        CandleUrl = CmPrayerList.Candle100.Url;
    }


    //Obtain the form and its view model
    ConfiguredFormInfo pickedForm = Model.Parent.GetPropertyValue<ConfiguredFormInfo>("formPicker");
    FormViewModel vm = formulate.api.Rendering.GetFormViewModel(pickedForm.FormId, pickedForm.LayoutId, pickedForm.TemplateId, Model);
}


<div class="prayerRequest">
    <div class="grid-x grid-margin-x grid-padding-x">
        <div class="cell">
            <div>
                <a href="@Model.Parent.Url">« Back to Prayer Corner</a>
            </div>
            <br />


            <div class="grid-x grid-padding-x grid-padding-y prayerDataPnl">
                <div class="cell auto medium-16 large-18 text-center">
                    <br />
                    <div class="grid-x">
                        <div class="cell medium-16 medium-offset-4 large-10 large-offset-7 text-center">
                            @if (hidePrayerBtn)
                            { <br /> }
                            else
                            {
                                if (IsAuthenticated)
                                {


                                    if (isPrayeringFor)
                                    {
                                        <a onclick="return false;" class="button primary expanded avgHeight inactive">I am praying for this person</a>
                                    }
                                    else
                                    {
                                        using (Html.BeginUmbracoForm<Controllers.PrayerController>("PledgePrayers", new { @loginId = User.Identity.Name, prayerId = Model.Id }, FormMethod.Post))
                                        {
                                            <input type="submit" value="I will pray for you" class="button primary expanded avgHeight" />
                                        }
                                    }
                                }
                                else
                                {
                                    <a onclick="return false;" class="button primary expanded avgHeight inactive">I will pray for you</a>
                                    <h5 class="btnMsg">Please log in to offer prayers.</h5>
                                }
                            }
                        </div>
                    </div>
                    <br />
                    <div class="grid-x data">
                        <div class="cell medium-12 large-12 text-center">
                            <div class="dataType">Requested on</div>
                            <div class="dataValue">@Html.Raw(strRequestDate)</div>
                            <br class="show-for-small-only" />
                        </div>
                        <div class="cell medium-12 large-12 text-center">
                            <div class="dataType">Offered Prayers</div>
                            <div class="dataValue">@prayersOffered</div>
                        </div>
                    </div>
                </div>
                <div class="cell hide-for-small-only medium-8 large-6">
                    <img alt="Lit Candle" src="@CandleUrl" />
                </div>
            </div>

            <br />
            <br />
            <p>@prayer</p>
            <br />
            <br />

            <div class="formulate-wrapper report-page">
                <input type="hidden" id="pageId" value="@Model.Id" />
                <input type="hidden" id="pageName" value="@Model.Name" />
                <input type="hidden" id="pageUrl" value="@Model.Url" />

                @Html.Partial("~/Views/Partials/Formulate/RenderForm.cshtml", vm)
            </div>
        </div>
    </div>
</div>