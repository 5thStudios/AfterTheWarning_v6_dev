@using Models;
@using System.Text;
@using System.Text.RegularExpressions;
@using Newtonsoft;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Converters;
@using System;
@using System.Collections.Generic;
@using System.Web.UI;
@using System.Web.Script.Serialization;
@using ContentModels = Umbraco.Web.PublishedContentModels;
@inherits UmbracoViewPage<ContentModels.Visionary>
@{ Layout = "TopLevel.cshtml";}


@section Header {}



<div class="grid-x grid-padding-x grid-padding-y biography-pnl">
    <div class="cell small-24 medium-8 large-6 text-center">
        <img alt="@Model.VisionarysName" src="@Model.PageImage.GetCropUrl(Common.crop.Portrait_300x400)" />
    </div>
    <div class="cell small-24 medium-16 large-18">
        <div class="grid-x grid-padding-x">
            <div class="cell small-24 large-12">
                <div class="grid-x grid-padding-x">
                    <div class="cell shrink">
                        <h4>Name</h4>
                    </div>
                    <div class="cell auto content">
                        <h4>@Model.VisionarysName</h4>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.Religion))
            {
                if (Model.Religion != Common.miscellaneous.OtherOrKeepPrivate)
                {
                    <div class="cell small-24 large-12">
                        <div class="grid-x grid-padding-x">
                            <div class="cell shrink">
                                <h4>Religion</h4>
                            </div>
                            <div class="cell auto content">
                                <h4>@Model.Religion</h4>
                            </div>
                        </div>
                    </div>
                }
            }

            @if (!string.IsNullOrEmpty(Model.Email))
            {
                <div class="cell small-24 large-12">
                    <div class="grid-x grid-padding-x">
                        <div class="cell shrink">
                            <h4>Email</h4>
                        </div>
                        <div class="cell auto content">
                            <h4><a href="mailto:@Model.Email" target="_blank">@Model.Email</a></h4>
                        </div>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.Phone))
            {
                <div class="cell small-24 large-12">
                    <div class="grid-x grid-padding-x">
                        <div class="cell shrink">
                            <h4>Phone</h4>
                        </div>
                        <div class="cell auto content">
                            @{var phoneNo = new String(Model.Phone.Where(Char.IsDigit).ToArray()); }
                            <h4><a href="tel:@phoneNo" target="_blank">@Model.Phone</a></h4>
                        </div>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.OriginalSiteUrl))
            {
                <div class="cell small-24 large-12">
                    <div class="grid-x grid-padding-x">
                        <div class="cell shrink">
                            <h4>Original Site</h4>
                        </div>
                        <div class="cell auto content">
                            <h4><a href="@Model.OriginalSiteUrl" target="_blank">@Model.OriginalSiteName</a></h4>
                        </div>
                    </div>
                </div>
            }

            @{
                if (Model.Address != null)
                {
                    //Extract address
                    List<addressRecord> lstAddressRecord = new JavaScriptSerializer().Deserialize<List<addressRecord>>(Model.Address.ToString());

                    if (lstAddressRecord.Count > 0)
                    {
                        //Build address
                        StringBuilder strAddress = new StringBuilder();
                        foreach (var record in lstAddressRecord)
                        {
                            strAddress.Append(record.address + "<br />");
                            strAddress.Append(record.city + ", ");
                            strAddress.Append(record.state + " ");
                            strAddress.Append(record.postal);
                            break;
                        }

                        <div class="cell small-24 large-12">
                            <div class="grid-x grid-padding-x">
                                <div class="cell shrink">
                                    <h4>Address</h4>
                                </div>
                                <div class="cell auto content">
                                    <h4>@Html.Raw(strAddress.ToString())</h4>
                                </div>
                            </div>
                        </div>
                    }
                }
            }

        </div>
    </div>
</div>
<br />



@{Html.RenderAction("RenderMsgs_byVisionary", "Message", new { ipVisionary = Model.AncestorOrSelf(Common.docType.Visionary) });}


@section Footer {}